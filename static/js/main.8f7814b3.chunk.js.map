{"version":3,"sources":["registerServiceWorker.js","Bootstrap/ActionTypes.ts","App/Login/Data/Reducers/Reducers.ts","Bootstrap/Langs/Data/Reducers/Reducers.ts","Bootstrap/Store.ts","Main.tsx","Bootstrap/AxiosHook.ts","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ActionTypes","token","localStorage","getItem","expirationDate","userId","username","userType","InitialLogin","parseInt","lang","InitialLang","selected","rootReducers","combineReducers","LoginReducer","arguments","length","undefined","action","type","LOGIN","Object","objectSpread","payload","setItem","toString","ChangeLangReducer","CHANGE_LANG","reload","Main","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","authorized","date1","Date","parse","getDate","react_default","a","createElement","Fragment","dist_default","width","height","onUpdate","err","result","alert","getText","Axios","interceptors","request","use","config","headers","authorization","Promise","reject","axiosHook","Component","connect","store","authInfo","changeLangReducer","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","es","createStore","BrowserRouter","basename","src_Main","URL","process","origin","addEventListener","concat","fetch","response","status","get","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8f7814b3.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export enum ActionTypes {\r\n    LOGIN,\r\n    CHANGE_LANG\r\n}","import {AuthInfo} from \"../Types\";\r\nimport {Action} from \"../../../../Bootstrap/Store\";\r\nimport {ActionTypes} from \"../../../../Bootstrap/ActionTypes\";\r\nimport Axios from \"axios\";\r\n\r\n\r\nconst token = localStorage.getItem('token');\r\nconst expirationDate = localStorage.getItem('expirationDate');\r\nconst userId = localStorage.getItem('userId');\r\nconst username = localStorage.getItem('username');\r\nconst userType = localStorage.getItem('userType');\r\nexport const InitialLogin: AuthInfo = {\r\n    token: token ? token : '',\r\n    expirationDate: expirationDate ? expirationDate : '',\r\n    username: username ? username : '',\r\n    userId: parseInt(userId ? userId : '0'),\r\n    userType: userType ? userType : '',\r\n};\r\n\r\nexport function LoginReducer(state: AuthInfo = InitialLogin, action: Action<AuthInfo>): AuthInfo {\r\n    switch (action.type) {\r\n\r\n        case ActionTypes.LOGIN:\r\n            state = {\r\n                ...state,\r\n                token: action.payload.token,\r\n                expirationDate:action.payload.expirationDate,\r\n                userId:action.payload.userId,\r\n                username:action.payload.username,\r\n                userType:action.payload.userType\r\n            };\r\n            localStorage.setItem('token', action.payload.token);\r\n            localStorage.setItem('userType', action.payload.userType);\r\n            localStorage.setItem('username', action.payload.username);\r\n            localStorage.setItem('userId', action.payload.userId.toString());\r\n            localStorage.setItem('expirationDate', action.payload.expirationDate);\r\n\r\n            return state;\r\n    }\r\n    return state;\r\n\r\n}","import {Langauge} from \"../Types\";\r\nimport {Action} from \"../../../Store\";\r\nimport {ActionTypes} from \"../../../ActionTypes\";\r\n\r\nconst lang = localStorage.getItem('lang');\r\nexport const InitialLang: Langauge = {\r\n    selected: lang ? (lang === \"en\" ? \"en\" : \"ar\") : \"ar\",\r\n};\r\n\r\nexport function ChangeLangReducer(state: Langauge = InitialLang, action: Action<Langauge>): Langauge {\r\n    switch (action.type) {\r\n        case ActionTypes.CHANGE_LANG:\r\n            state = {...state, selected: action.payload.selected};\r\n            localStorage.setItem('lang', action.payload.selected);\r\n\r\n            window.location.reload(false);\r\n\r\n            return state;\r\n    }\r\n\r\n    return state;\r\n}","import {createStore} from 'redux'\r\nimport {combineReducers} from 'redux';\r\nimport {AuthInfo} from \"../App/Login/Data/Types\";\r\nimport {LoginReducer} from \"../App/Login/Data/Reducers/Reducers\";\r\n\r\nimport {ActionTypes} from \"./ActionTypes\";\r\nimport {Langauge} from \"./Langs/Data/Types\";\r\nimport {ChangeLangReducer} from \"./Langs/Data/Reducers/Reducers\";\r\n\r\n\r\n\r\n\r\nexport interface Store {\r\n    LoginReducer:AuthInfo\r\n    ChangeLangReducer:Langauge\r\n }\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n    LoginReducer,\r\n    ChangeLangReducer\r\n});\r\n\r\n\r\nexport default () => {\r\n    return createStore(rootReducers);\r\n}\r\n\r\n\r\nexport interface Action<T = any> {\r\n    type: ActionTypes;\r\n    payload: T;\r\n}","import React, {Component} from 'react';\r\nimport Route from \"react-router-dom/Route\";\r\nimport {AuthInfo} from \"./App/Login/Data/Types\";\r\nimport LoginComponent from \"./App/Login/LoginComponent\";\r\nimport HelloComponent from \"./App/HelloComponent\";\r\nimport {connect} from 'react-redux';\r\nimport {Store} from \"./Bootstrap/Store\";\r\nimport {Layout} from \"./App/Shared/Layout\";\r\nimport {Langauge} from \"./Bootstrap/Langs/Data/Types\";\r\nimport Lang from \"./Bootstrap/Langs/Lang\";\r\nimport {axiosHook} from \"./Bootstrap/AxiosHook\";\r\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\r\n\r\ninterface Props {\r\n    authInfo: AuthInfo;\r\n    changeLangReducer: Langauge;\r\n    match: any;\r\n\r\n}\r\n\r\ninterface State {\r\n    authorized: boolean;\r\n}\r\n\r\nclass Main extends Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {authorized: false};\r\n    }\r\n\r\n    checkExpire(date1: string): boolean {\r\n        var authDate = Date.parse(date1);\r\n\r\n        var mydate = new Date().getDate();\r\n\r\n        if (authDate > mydate) {\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <>\r\n\r\n\r\n                <BarcodeScannerComponent\r\n                    width={500}\r\n                    height={500}\r\n                    onUpdate={(err, result) => {\r\n                        if (result != undefined){\r\n                            alert(result.getText())\r\n\r\n\r\n                        }\r\n                        // console.log(err)\r\n                    }}\r\n                />\r\n\r\n                {/*<Lang/>*/}\r\n                {/*{*/}\r\n\r\n                {/*    this.checkExpire(this.props.authInfo.expirationDate) && <LoginComponent/>*/}\r\n                {/*}*/}\r\n\r\n                {/*{!this.checkExpire(this.props.authInfo.expirationDate) &&*/}\r\n                {/*<Layout>*/}\r\n\r\n                {/*    <Route path=\"/\" component={HelloComponent}/>*/}\r\n\r\n                {/*    /!*<Route exact path={\"/payment/:id(\\\\d+)/\"}*!/*/}\r\n                {/*    /!*       component={({match}) => <PaymentMainComponent*!/*/}\r\n                {/*    /!*           id={match.params[\"id\"]}/>}/>*!/*/}\r\n                {/*</Layout>*/}\r\n\r\n                {/*//}*/}\r\n                {axiosHook()}\r\n            </>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect((store: Store) => {\r\n    return ({\r\n        authInfo: store.LoginReducer,\r\n        changeLangReducer:store.ChangeLangReducer\r\n    });\r\n\r\n})(Main);\r\n","import Axios from \"axios\";\r\n\r\n\r\nexport const axiosHook =()=>{\r\n    const token = localStorage.getItem('token');\r\n    Axios.interceptors.request.use(\r\n        config => {\r\n            config.headers.authorization = \"Bearer \" + token;\r\n            return config;\r\n        },\r\n        error => {\r\n            return Promise.reject(error);\r\n        }\r\n    );\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './tailwind.output.css'\r\nimport Store from \"./Bootstrap/Store\";\r\nimport {Provider} from \"react-redux\";\r\nimport Main from \"./Main\";\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n    <Provider store={Store()}>\r\n        <BrowserRouter basename={baseUrl}>\r\n            <Main/>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}